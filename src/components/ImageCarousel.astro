---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import type { Image as ImageType, UI } from "../types";

interface Props {
	images: ImageType[];
	class?: string;
	imageCarouselLabels: UI["index"]["projects"]["imageCarouselLabels"];
}
const { images, class: className, imageCarouselLabels } = Astro.props;

const allImages = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/**/*.{jpeg,jpg,png,gif,webp}",
);

const formatLabel = (
	template: string,
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	replacements: Record<string, any>,
): string => {
	let formatted: string = template;
	for (const key in replacements) {
		formatted = formatted.replace(`{${key}}`, replacements[key]);
	}
	return formatted;
};
---

<div
	class:list={["carousel-container group relative", className]}
	role="region"
	aria-label={imageCarouselLabels.carouselLabel}
	aria-roledescription="carousel"
	data-carousel
	data-label-image={imageCarouselLabels.imageLabel}
	data-label-goto={imageCarouselLabels.goToLabel}
>
	<div
		class="sr-only"
		aria-live="polite"
		aria-atomic="true"
		data-carousel-status
	>
		{
			formatLabel(imageCarouselLabels.imageLabel, {
				image: 1,
				max: images.length,
			})
		}
	</div>

	<div
		class="carousel-wrapper scrollbar-hide flex snap-x snap-mandatory overflow-x-auto scroll-smooth"
		data-carousel-wrapper
	>
		{
			images.map((image, index) => {
				if (!allImages[image.src]) {
					throw new Error(`Image not found: "${image.src}"`);
				}
				return (
					<div
						class="carousel-item w-full flex-shrink-0 snap-center snap-always"
						role="group"
						aria-roledescription="slide"
						aria-label={formatLabel(imageCarouselLabels.imageLabel, {
							image: index + 1,
							max: images.length,
						})}
					>
						<Image
							src={allImages[image.src]()}
							alt={image.alt}
							class="rounded-xl"
							quality="high"
						/>
					</div>
				);
			})
		}
	</div>

	<div
		class="absolute inset-y-0 left-0 flex items-center justify-start pl-4 opacity-0 transition-opacity group-hover:opacity-100 md:pl-6"
	>
		<button
			class="carousel-control bg-primary-950/50 hover:bg-primary-950/75 rounded-full p-2 text-white transition focus:outline-none disabled:cursor-not-allowed disabled:opacity-30"
			data-carousel-button="prev"
			aria-label={imageCarouselLabels.previousImageLabel}
		>
			<Icon name="arrow-left" class="text-primary-200 h-6 w-6" />
		</button>
	</div>

	<div
		class="absolute inset-y-0 right-0 flex items-center justify-end pr-4 opacity-0 transition-opacity group-hover:opacity-100 md:pr-6"
	>
		<button
			class="carousel-control bg-primary-950/50 hover:bg-primary-950/75 rounded-full p-2 text-white transition focus:outline-none disabled:cursor-not-allowed disabled:opacity-30"
			data-carousel-button="next"
			aria-label={imageCarouselLabels.nextImageLabel}
		>
			<Icon name="arrow-right" class="text-primary-200 h-6 w-6" />
		</button>
	</div>

	<div
		class="absolute -bottom-5 left-1/2 flex -translate-x-1/2 space-x-5"
		data-carousel-dots
	>
		{
			images.map((_, index) => (
				<button
					class="bg-primary-200/50 hover:bg-primary-200 h-3 w-3 rounded-full transition"
					data-carousel-dot={index}
					aria-label={formatLabel(imageCarouselLabels.goToLabel, {
						image: index + 1,
					})}
				/>
			))
		}
	</div>
</div>

<script>
	document.querySelectorAll("[data-carousel]").forEach((carouselContainer) => {
		const wrapper = carouselContainer.querySelector("[data-carousel-wrapper]");
		const prevButton = carouselContainer.querySelector(
			"[data-carousel-button='prev']",
		);
		const nextButton = carouselContainer.querySelector(
			"[data-carousel-button='next']",
		);
		const dotsContainer = carouselContainer.querySelector(
			"[data-carousel-dots]",
		);
		const statusElement = carouselContainer.querySelector(
			"[data-carousel-status]",
		);
		const slides = Array.from(wrapper?.children || []);
		const totalSlides = slides.length;
		const { labelImage, labelGoto } = (carouselContainer as HTMLElement)
			.dataset;

		if (
			!wrapper ||
			!prevButton ||
			!nextButton ||
			!dotsContainer ||
			!statusElement ||
			!labelImage ||
			!labelGoto
		)
			return;

		let currentIndex = 0;

		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const index = slides.indexOf(entry.target as HTMLElement);
						currentIndex = index;
						updateUI();
					}
				});
			},
			{
				root: wrapper,
				threshold: 0.5,
			},
		);

		slides.forEach((slide) => observer.observe(slide));

		const updateUI = () => {
			if (!prevButton || !nextButton || !dotsContainer || !statusElement)
				return;

			(prevButton as HTMLButtonElement).disabled = currentIndex === 0;
			(nextButton as HTMLButtonElement).disabled =
				currentIndex === totalSlides - 1;

			statusElement.textContent = labelImage
				.replace("{image}", String(currentIndex + 1))
				.replace("{max}", String(totalSlides));

			dotsContainer.querySelectorAll("button").forEach((dot, index) => {
				if (index === currentIndex) {
					dot.classList.add("bg-primary-200");
					dot.classList.remove("bg-primary-200/50");
				} else {
					dot.classList.remove("bg-primary-200");
					dot.classList.add("bg-primary-200/50");
				}
			});
		};

		prevButton.addEventListener("click", () => {
			const prevSlideIndex = Math.max(0, currentIndex - 1);
			slides[prevSlideIndex]?.scrollIntoView({
				behavior: "smooth",
				block: "nearest",
				inline: "start",
			});
		});

		nextButton.addEventListener("click", () => {
			const nextSlideIndex = Math.min(totalSlides - 1, currentIndex + 1);
			slides[nextSlideIndex]?.scrollIntoView({
				behavior: "smooth",
				block: "nearest",
				inline: "start",
			});
		});

		dotsContainer.querySelectorAll("button").forEach((dot, index) => {
			dot.addEventListener("click", () => {
				slides[index]?.scrollIntoView({
					behavior: "smooth",
					block: "nearest",
					inline: "start",
				});
			});
		});

		updateUI();
	});
</script>
